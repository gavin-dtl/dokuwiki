===== Binder C实现====

{{tag>binder}}

Android 进程间通信依赖于Binder驱动，如进程A(client)，B(server)间需进行通信，B需通过 binder 向 serviceManager 注册服务，A向serviceManager查询服务，得到handle进行调用。

Binder 核心主要为IPC（进程间调用）和RPC（远程调用），RPC是在IPC基础上进行封装，IPC是基础，进行进程间数据传输。\\
RPC：
  - 封装数据
  - 发送数据
  - 取出解析数据
  - 调用

----

=== ==
<code bash>
frameworks/native/cmds/servicemanager/service_manager.c
# Binder库实现
frameworks/native/cmds/servicemanager/binder.c
# 简单binder通信过程
frameworks/native/cmds/servicemanager/bctest.c  
</code>

==== Binder 通信过程 ===
Binder通信涉及client，server，serviceManager三者，三者过程如下

=== serviceManager ===
serviceManager也是个服务，android开机是启动该服务，并改服务的ID为 0。
  - binder_open打开驱动
  - 告诉驱动程序它就是serviceManager
  - 读驱动，获取数据 解析数据
    * 注册服务，在链表中记录
    * 获取服务，链表中查询服务, 返回server进程

调用流程：


<code c>
//frameworks\native\cmd\ servicemanager\servicemanager.c
int main(int argc, char **argv)
{
    struct binder_state *bs;

    bs = binder_open(128*1024);         //打开binder 驱动
    if (!bs) {
        ALOGE("failed to open binder driver\n");
        return -1;
    }

    if (binder_become_context_manager(bs)) {     //告诉驱动，该进程为serviceManger进程
        ALOGE("cannot become context manager (%s)\n", strerror(errno));
        return -1;
    }
    
    .......

    svcmgr_handle = BINDER_SERVICE_MANAGER;
    binder_loop(bs, svcmgr_handler);//循环svcmgr_handler处理函数 

    return 0;
}

//frameworks\native\cmd\ servicemanager\servicemanager.c
void binder_loop(struct binder_state *bs, binder_handler func)
{
....
  bwr.read_size = sizeof(readbuf);
  bwr.read_consumed = 0;
  bwr.read_buffer = (uintptr_t) readbuf;

  res = ioctl(bs->fd, BINDER_WRITE_READ, &bwr); //获取数据
...
  
  res = binder_parse(bs, 0, (uintptr_t) readbuf, bwr.read_consumed, func);//解析数据并调用svcmgr_handler数据进行处理函数
  if (res == 0) {
    ALOGE("binder_loop: unexpected reply?!\n");
    break;
  }
...
}

int binder_parse(struct binder_state *bs, struct binder_io *bio,
                 uintptr_t ptr, size_t size, binder_handler func)
{
...
  if (func) {
    unsigned rdata[256/4];
    struct binder_io msg;
    struct binder_io reply;
    int res;

    bio_init(&reply, rdata, sizeof(rdata), 4);
    bio_init_from_txn(&msg, txn);
    res = func(bs, txn, &msg, &reply);  //调用svcmgr_handler数据进行处理函数
    binder_send_reply(bs, &reply, txn->data.ptr.buffer, res);  //返回binde_io
  }
...
  
}

//frameworks\native\cmd\ servicemanager\servicemanager.c
int svcmgr_handler(struct binder_state *bs,
                   struct binder_transaction_data *txn,
                   struct binder_io *msg,
                   struct binder_io *reply)
{
    switch(txn->code) {

       case SVC_MGR_GET_SERVICE:  //获取服务
       case SVC_MGR_CHECK_SERVICE: //获取服务
       case SVC_MGR_ADD_SERVICE:   //注册服务
     } 
}
</code>

----
=== server ===
  - binder_open 打开驱动
  - 向serviceManager注册服务
  - while（1） ioctl（读取数据）
  - 解析数据 binder_write_read
  - binder_io根据code调用，决定调用函数，
  - 返回值转为binder_io， reply发给client

注册服务调用流程：
<code c>
//frameworks/native/cmds/servicemanager/bctest.c
binder_open
svcmgr_publish

binder_call(bs, &msg, &reply, target, SVC_MGR_ADD_SERVICE))
  msg 含服务名称
  reply: 含servicemanager 回复数据
  target: 发送给servermanger, BINDER_SERVICE_MANAGER = 0 
  code: SVC_MGR_ADD_SERVICE,调用servicemanager函数编号addservier 
</code>

----
=== client ===
  - binder_open 打开驱动
  - 从serviceManager获得服务server进程handle
  - 构造参数binder_io
  - 调用binder_call (handle,code, binder_io)发送数据
  - 获取返回值 binder_io 并分析

获取服务过程:
<code c>
binder_open
svcmgr_lookup
binder_call 调用SVC_MGR_CHECK_SERVICE getserver
</code>

----
=== Binder 通信数据转换 ===
<code>
msg -> binder_io -> binder_write_read(kernel实现) -> binder_io -> msg
</code>












