===== android manager 控制 Gpio =====

<markdown>
## 参考文件
1. mokoid.rar JNI实现 
2. SerialManager 实现
3. GpioManager.path



## 调用关系
1. ContexImpl.java, SystemServer.java 注册到系统服务
2. app 调用getSystemService获取GpioManager.java
3. GpioManager.java 通过IGpioManager.aidl 调用GpioService.java
4. GpioService.java 调用通过AndroidRuntime.cpp onload.cpp注册的JNI com_android_server_GpioManager.cpp


## 实现步骤
### 实现Manager 文件,可通过getSystemServer获取Manager 
frameworks/base/core/java/android/os/GpioManager.java
frameworks/base/core/java/android/os/IGpioManager.aidl
frameworks/base/Android.mk

编译aidl
```cpp
--- a/frameworks/base/Android.mk
+++ b/frameworks/base/Android.mk
@@ -150,6 +150,7 @@ LOCAL_SRC_FILES += \
         core/java/android/hardware/camera2/ICameraDeviceUser.aidl \
         core/java/android/hardware/camera2/ICameraDeviceCallbacks.aidl \
         core/java/android/hardware/ISerialManager.aidl \
 +       core/java/android/os/IGpioManager.aidl \
         core/java/android/hardware/display/IDisplayManager.aidl \
         core/java/android/hardware/display/IDisplayManagerCallback.aidl \
         core/java/android/hardware/display/IVirtualDisplayCallback.aidl 
```

### 实现JNI
frameworks/base/services/core/jni/com_android_server_GpioManager.cpp
frameworks/base/services/core/java/com/android/server/GpioService.java
frameworks/base/core/jni/Android.mk
frameworks/base/core/jni/AndroidRuntime.cpp
frameworks/base/services/core/jni/Android.mk
frameworks/base/services/core/jni/onload.cpp

```cpp
--- a/frameworks/base/core/jni/Android.mk
+++ b/frameworks/base/core/jni/Android.mk
@@ -76,6 +76,7 @@ LOCAL_SRC_FILES:= \
        android_os_SystemProperties.cpp \
        android_os_Trace.cpp \
        android_os_UEventObserver.cpp \
+       android_os_Gpio.cpp \
        android_net_LocalSocketImpl.cpp \
        android_net_NetUtils.cpp \
        android_net_TrafficStats.cpp \
```

```cpp
--- a/frameworks/base/core/jni/AndroidRuntime.cpp
+++ b/frameworks/base/core/jni/AndroidRuntime.cpp
@@ -155,6 +155,7 @@ extern int register_android_os_Trace(JNIEnv* env);
 extern int register_android_os_FileObserver(JNIEnv *env);
 extern int register_android_os_UEventObserver(JNIEnv* env);
 extern int register_android_os_MemoryFile(JNIEnv* env);
+extern int register_android_os_Gpio(JNIEnv* env);
 extern int register_android_net_LocalSocketImpl(JNIEnv* env);
 extern int register_android_net_NetworkUtils(JNIEnv* env);
 extern int register_android_net_TrafficStats(JNIEnv* env);
 
@@ -1263,6 +1264,7 @@ static const RegJNIRec gRegJNI[] = {
     REG_JNI(register_android_os_SystemProperties),
     REG_JNI(register_android_os_Binder),
     REG_JNI(register_android_os_Parcel),
+    REG_JNI(register_android_os_Gpio),
     REG_JNI(register_android_nio_utils),
     REG_JNI(register_android_graphics_Graphics),
     REG_JNI(register_android_view_DisplayEventReceiver),
```

```cpp
--- a/frameworks/base/services/core/jni/Android.mk
+++ b/frameworks/base/services/core/jni/Android.mk
@@ -26,6 +26,7 @@ LOCAL_SRC_FILES += \
     $(LOCAL_REL_DIR)/com_android_server_VibratorService.cpp \
     $(LOCAL_REL_DIR)/com_android_server_PersistentDataBlockService.cpp \
     $(LOCAL_REL_DIR)/com_android_server_ActivityManagerService.cpp \
+       $(LOCAL_REL_DIR)/com_android_server_GpioManager.cpp \
     $(LOCAL_REL_DIR)/onload.cpp
```

```cpp
--- a/frameworks/base/services/core/jni/onload.cpp
+++ b/frameworks/base/services/core/jni/onload.cpp
@@ -43,6 +43,7 @@ int register_android_server_PersistentDataBlockService(JNIEnv* env);
 int register_android_server_fingerprint_FingerprintService(JNIEnv* env);
 int register_android_server_Watchdog(JNIEnv* env);
 int register_android_server_ActivityManagerService(JNIEnv* env);
+int register_android_server_GpioService(JNIEnv *env);
 };
 
using namespace android;
@@ -81,6 +82,7 @@ extern "C" jint JNI_OnLoad(JavaVM* vm, void* reserved)
     register_android_server_fingerprint_FingerprintService(env);
     register_android_server_Watchdog(env);
     register_android_server_ActivityManagerService(env);
+       register_android_server_GpioService(env);
 
     return JNI_VERSION_1_4;
 }
```

### 开启Gpio server
frameworks/base/services/java/com/android/server/SystemServer.java
```cpp
--- a/frameworks/base/services/java/com/android/server/SystemServer.java
+++ b/frameworks/base/services/java/com/android/server/SystemServer.java
@@ -415,6 +415,7 @@ public final class SystemServer {
         BluetoothManagerService bluetooth = null;
         UsbService usb = null;
         SerialService serial = null;
+        GpioService gpio = null;
         NetworkTimeUpdateService networkTimeUpdater = null;
         CommonTimeManagementService commonTimeMgmtService = null;
         InputManagerService inputManager = null;
@@ -840,11 +841,18 @@ public final class SystemServer {
                 try {
                     Slog.i(TAG, "Serial Service");
                     // Serial port support
                    serial = new SerialService(context);
                    ServiceManager.addService(Context.SERIAL_SERVICE, serial);
                 } catch (Throwable e) {
                     Slog.e(TAG, "Failure starting SerialService", e);
                 }
+                
+                           try {
+                    Slog.i(TAG, "Gpio Service");
+                    // GPIO port support
+                    gpio = new GpioService(context);
+                    ServiceManager.addService(Context.GPIO_SERVICE, gpio);
+                } catch (Throwable e) {
+                    Slog.e(TAG, "Failure starting GpioService", e);
+                }
             }
```

### 绑定Gpio manager 和服务

frameworks/base/core/java/android/content/Context.java
frameworks/base/core/java/android/app/ContextImpl.java
```cpp
--- a/frameworks/base/core/java/android/content/Context.java
+++ b/frameworks/base/core/java/android/content/Context.java
@@ -2752,6 +2752,17 @@ public abstract class Context {
      */
     public static final String SERIAL_SERVICE = "serial";
 
+       /**
+     * Use with {@link #getSystemService} to retrieve a {@link
+     * android.hardware.GpioManager} for access to gpio ports.
+     *
+     * @see #getSystemService
+     * @see android.hardware.GpioManager
+     *
+     * @hide
+     */
+    public static final String GPIO_SERVICE = "a83t_gpio";
+
```

```cpp
--- a/frameworks/base/core/java/android/app/ContextImpl.java
+++ b/frameworks/base/core/java/android/app/ContextImpl.java
@@ -62,6 +62,8 @@ import android.graphics.drawable.Drawable;
 import android.hardware.ConsumerIrManager;
 import android.hardware.ISerialManager;
 import android.hardware.SerialManager;
+import android.os.IGpioManager;
+import android.os.GpioManager;
 import android.hardware.SystemSensorManager;
 import android.hardware.hdmi.HdmiControlManager;
 import android.hardware.hdmi.IHdmiControlService;
@@ -589,6 +591,12 @@ class ContextImpl extends Context {
                     return new SerialManager(ctx, rialManager.Stub.asInterface(b));
                 }});
 
+        registerService(GPIO_SERVICE, new ServiceFetcher() {
+                public Object createService(ContextImpl ctx) {
+                    IBinder b = ServiceManager.getService(GPIO_SERVICE);
+                    return new GpioManager(ctx, ioManager.Stub.asInterface(b));
+                }});
+
         registerService(VIBRATOR_SERVICE, new ServiceFetcher() {

```

### 应用调用
如不能编译参考笔记“不能导入编译SDK新增class/api”
```cpp
import android.os.GpioManager;
GpioManager mGpioManager = (GpioManager) mContext.getSystemService(Context.GPIO_SERVICE);
if (mGpioManager != null) {
        mGpioManager.setMulSel(2, 3, 1);
        mGpioManager.writeGpio(2, 3, 0);
} else {
    Log.e(TAG, "mGpioManager is null");
}
```

```cpp
import android.os.Gpio;
Gpio.setMulSel(2, 3, 1);
Gpio.writeGpio(2, 3, 0);
```

</markdown>