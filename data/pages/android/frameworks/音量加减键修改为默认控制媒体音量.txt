===== 音量加减键修改为默认控制媒体音量 ====

==== 实现原理 ====
  * 按键所对应的默认音频数据流从来电数据流改为音乐数据流

  * ./frameworks/base/packages/SystemUI/src/com/android/systemui/volume/VolumePanel.java
<code cpp>
    protected void onShowVolumeChanged(int streamType, int flags, MediaController controller) {
        int index = getStreamVolume(streamType);

        mRingIsSilent = false;

        if (LOGD) {
            Log.d(mTag, "onShowVolumeChanged(streamType: " + streamToString(streamType)
                    + ", flags: " + flagsToString(flags) + "), index: " + index);
        }

        // get max volume for progress bar

        int max = getStreamMaxVolume(streamType);
        StreamControl sc = mStreamControls.get(streamType);

        switch (streamType) {

            case AudioManager.STREAM_RING: {
                Uri ringuri = RingtoneManager.getActualDefaultRingtoneUri(
                        mContext, RingtoneManager.TYPE_RINGTONE);
                if (ringuri == null) {
                    mRingIsSilent = true;
                }
                break;
            }

            case AudioManager.STREAM_MUSIC: {
                // Special case for when Bluetooth is active for music
                if ((mAudioManager.getDevicesForStream(AudioManager.STREAM_MUSIC) &
                        (AudioManager.DEVICE_OUT_BLUETOOTH_A2DP |
                        AudioManager.DEVICE_OUT_BLUETOOTH_A2DP_HEADPHONES |
                        AudioManager.DEVICE_OUT_BLUETOOTH_A2DP_SPEAKER)) != 0) {
                    setMusicIcon(IC_AUDIO_BT, IC_AUDIO_BT_MUTE);
                } else {
                    setMusicIcon(IC_AUDIO_VOL, IC_AUDIO_VOL_MUTE);
                }
                break;
            }

            case AudioManager.STREAM_VOICE_CALL: {
</code>

<code cpp>
     9 --- a/frameworks/base/media/java/android/media/AudioService.java
     10 +++ b/frameworks/base/media/java/android/media/AudioService.java
     11 @@ -3282,15 +3282,16 @@ public class AudioService extends IAudioService.Stub {
     12                      return AudioSystem.STREAM_VOICE_CALL;
     13                  }
     14              } else if (suggestedStreamType == AudioManager.USE_DEFAULT_STREAM_TYPE) {
     15 -                if (isAfMusicActiveRecently(StreamOverride.sDelayMs)) {
     16 +                return AudioSystem.STREAM_MUSIC;
     17 +                /* if (isAfMusicActiveRecently(StreamOverride.sDelayMs)) {
     18                      if (DEBUG_VOL)
     19                          Log.v(TAG, "getActiveStreamType: Forcing STREAM_MUSIC stream active");
     20                      return AudioSystem.STREAM_MUSIC;
     21 -                    } else {
     22 -                        if (DEBUG_VOL)
     23 -                            Log.v(TAG, "getActiveStreamType: Forcing STREAM_RING b/c default");
     24 -                        return AudioSystem.STREAM_RING;
     25 -                }
     26 +                } else {
     27 +                    if (DEBUG_VOL)
     28 +                        Log.v(TAG, "getActiveStreamType: Forcing STREAM_RING b/c default");
     29 +                    return AudioSystem.STREAM_RING;
     30 +                } */
     31              } else if (isAfMusicActiveRecently(0)) {
     32                  if (DEBUG_VOL)
     33                      Log.v(TAG, "getActiveStreamType: Forcing STREAM_MUSIC stream active");

</code>