===== mstar蓝牙加载过程 =====

{{tag>bluetooth}}

mstar bt模块加载采用动态加载，根据模块usb设备的vid&pid进行加载对应的驱动。

mstar整个的蓝牙模块加载过程，开机时，在init.monet.rc注册loadbt.sh服务，然后再系统开启startOtherServices服务时，进行检测蓝牙模块厂商，设置蓝牙模块厂商系统属性，及开启loadbt服务加载对应的驱动，然后在打开蓝牙模块时，通过hw_get_module获取对应的hal module，完成整个蓝牙模块加载。


----

以下rtl8723bu模块为例：

首先来看下在打开bt时，bt应用需找到对应的hal模块:
<code cpp>
//packages/apps/Bluetooth/jni/com_android_bluetooth_btservice_AdapterService.cpp

static void classInitNative(JNIEnv* env, jclass clazz) {
    int err;
    hw_module_t* module;
  
  ....
    
    char value[PROPERTY_VALUE_MAX];
    property_get("bluetooth.mock_stack", value, "");

    const char *id = (strcmp(value, "1")? BT_STACK_MODULE_ID : BT_STACK_TEST_MODULE_ID);

    /* 或对应的hal module */
    err = hw_get_module(id, (hw_module_t const**)&module); 

    if (err == 0) {
        hw_device_t* abstraction;
        err = module->methods->open(module, id, &abstraction);
        if (err == 0) {
            bluetooth_module_t* btStack = (bluetooth_module_t *)abstraction;
            sBluetoothInterface = btStack->get_bluetooth_interface();
        } else {
           ALOGE("Error while opening Bluetooth library");
        }
    } else {
        ALOGE("No Bluetooth Library found");
    }
}
</code>

跟踪 hw_get_module
<code c>
// hardware/libhardware/hardware.c
int hw_get_module(const char *id, const struct hw_module_t **module)
{
    return hw_get_module_by_class(id, NULL, module);
}

int hw_get_module_by_class(const char *class_id, const char *inst,
                           const struct hw_module_t **module)
{
  
  // 直接查询 是否有对应的模块的系统属性，有着found 
  snprintf(prop_name, sizeof(prop_name), "ro.hardware.%s", name);
  if (property_get(prop_name, prop, NULL) > 0) {
    if (hw_module_exists(path, sizeof(path), name, prop) == 0) {
      goto found;
    }
  }
  
  /* 直接查询 是否有默认的模块的系统属性，  
   *variant_keys定义如下，可从中看到有个mstar.bt.driver属性
   *这个属性就是mstar的蓝牙属性
   */
  for (i=0 ; i<HAL_VARIANT_KEYS_COUNT; i++) {
    if (property_get(variant_keys[i], prop, NULL) == 0) {
      continue;
    }
    if (hw_module_exists(path, sizeof(path), name, prop) == 0) {
      goto found;
    }
  }

  /* Nothing found, try the default */
  if (hw_module_exists(path, sizeof(path), name, "default") == 0) {
    goto found;
  }
  
  static const char *variant_keys[] = {
    "ro.hardware",  /* This goes first so that it can pick up a different
                       file on the emulator. */
    "ro.product.board",
    "ro.board.platform",
    "ro.arch",
    // MStar Android Patch Begin
    // refine bluetooth flow
    "mstar.bt.driver",
    // MStar Android Patch End
};
</code>

通过跟踪hal module加载过程，可以看到，mstar bt模块加载时跟进系统属性 ** mstar.bt.driver ** 觉得决定的，即会加载bluetooth.{mstar.bt.driver}.so
这个库。

那么mstar.bt.driver这个系统属性又时哪进行定义的呢？通过搜索，改系统属性定义在：
<code c>
// device/mstar/common/libraries/bluetooth/bluetoothmonitor/bluedroid/bluetooth.c
</code>

在上述文件中，可看到init_detect_bt_device 这个函数，该函数从名字上就可看出，为蓝牙的检测和和初始化的，接下，看其实现了什么功能.
<code c>
// device/mstar/common/libraries/bluetooth/bluetoothmonitor/bluedroid/bluetooth.c
int init_detect_bt_device() {
   ...
    // 找到插入的usb蓝牙
    int device_count = find_existing_devices();
    ALOGD("============device_count = %d",device_count);
    if (has_device != device_count) {
        has_device = device_count;
    }
    // 加载对应的蓝牙
    if (0 == bt_common_load_driver()) { 
        property_set("mstar.bt.driver",bt_vendor); //设置系统属性mstar.bt.driver 为对应的蓝牙厂商
    }
    return 0;
}
</code>

上述，已经完蓝牙模块的查找，加载，以及设置 ** mstar.bt.driver **属性。

接着看下各个步骤是怎样实现的。
<code c>
static int find_existing_devices() {
	...
	busdir = opendir("/sys/bus/usb/devices");
	while ((de = readdir(busdir)) != 0) {{
          ...
         for (i=0;i<sizeof(rtk_tables)/sizeof(rtk_tables[0]);i++) {
            if ((vid==rtk_tables[i].vid) && (pid==rtk_tables[i].pid)) {
              status_vendor[3].amount++;
              num++;
           }
        }
       }
                                             
    if (status_vendor[3].amount > 0) {
        strcpy(bt_vendor,"rtk");
    }
  
}
  
static struct bt_vid_pid rtk_tables[] =
{
    {0x0bda,0x818c},//rtk
 //   {0x0bda:0xb720},//rtk8723bu
};
</code>
find_existing_device由上可看出，是通过遍历usb设备节点vip pid进行匹配，id对蓝牙模块的vid pid进行匹配，如果相同，即为找到对应的蓝牙模块，并设置 **bt_vendor** 的 值，然后在 ** init_detect_bt_device ** 设置 ** mstar.bt.driver **系统属性。

bt_common_load_driver里又做了什么呢？
<code c>
// device/mstar/common/libraries/bluetooth/bluetoothmonitor/bluedroid/bluetooth.c
static int bt_common_load_driver() {

    if (strcmp(bt_vendor,"bcm") == 0) {
        snprintf(daemon_cmd,sizeof(daemon_cmd)/sizeof(char),"loadbt:%s%s",bt_vendor, bt_vendor_bcm_ext);
    } else {
        snprintf(daemon_cmd,sizeof(daemon_cmd)/sizeof(char),"loadbt:%s",bt_vendor);
    }
    sched_yield();
    property_set("ctl.start",daemon_cmd);  //这里通过ctl.start 开启了一个服务
    usleep(500*1000);
    if (strcmp(bt_vendor,"mtk") == 0) {
        property_set("ctl.start","mtkbt");
    }
    return -1;
}
</code>

loadbt服务定义在
<code bash>
#device/mstar/arbutus/init.monet.rc

# service for bluetooth
service loadbt /system/bin/loadbt.sh
    class main
    disabled
    oneshot
    seclabel u:r:loadbt:s0
service unloadbt /system/bin/unloadbt.sh
    class main
    disabled
    oneshot
</code>

<code bash>
# loadbt.sh
csr)
insmod /system/lib/modules/bt_usb.ko
sleep 1
;;
rtk)
insmod /system/lib/modules/firmware_class.ko
insmod /system/lib/modules/rtk_btusb.ko
sleep 1
;;
*)
echo "no bt driver!!!"
;;
esac
</code>
由上可看书，驱动加载通过 ** bt_vendor **这的值进行加载，加载对应参数的蓝牙模块。

这样通过usb的vid pid则完成了bt模块的自适配。

---- 

接下来看下 ** init_detect_bt_device ** 是怎么开始运行的.
<code cpp>
//frameworks/base/core/jni/android_bluetooth_BluetoothMonitor.cpp
static jboolean android_bluetooth_initDetectBluetoothDevice(JNIEnv *env,jobject) {
#ifdef BOARD_HAVE_BLUETOOTH
    return (jboolean)(::init_detect_bt_device()== 0);
#else
    return false;
#endif
</code>
这里需要平台先定义 ** BOARD_HAVE_BLUETOOTH ** 这个宏。
<code bash>
# build/core/product.mk

_product_stash_var_list += \
	BOARD_WPA_SUPPLICANT_DRIVER \
	BOARD_WLAN_DEVICE \
	BOARD_USES_GENERIC_AUDIO \
	BOARD_KERNEL_CMDLINE \
	BOARD_KERNEL_BASE \
	BOARD_HAVE_BLUETOOTH \
	BOARD_HAVE_BLUETOOTH_RTK \
	BOARD_VENDOR_USE_AKMD \
	BOARD_EGL_CFG \

</code>

<code bash>
# mstar/arbutus/rtkbt/rtkbt.mk

BOARD_HAVE_BLUETOOTH := true
BOARD_HAVE_BLUETOOTH_RTK := true
BOARD_HAVE_BLUETOOTH_NAME := rtkbt

</code>

 注册这个jni给上层调用：
<code cpp>
static JNINativeMethod gMethods[] = {
    { "initDetectBluetoothDevice", "()Z", (void*) android_bluetooth_initDetectBluetoothDevice },
    { "detectBluetoothDevice", "()I", (void*) android_bluetooth_detectBluetoothDevice },
};
</code>

<code java>
public class BluetoothMonitor {
//frameworks/base/core/java/android/bluetooth/BluetoothMonitor.java
...

    public native static boolean initDetectBluetoothDevice();
    public native static int detectBluetoothDevice();
}
</code>

<code java>
//frameworks/base/services/core/java/com/android/server/BluetoothManagerService.java
    BluetoothManagerService(Context context) {
        // MStar Android Patch Begin
        // detect bt dongle thread
        mBluetoothMonitor = new BluetoothMonitor();
        new Thread(new Runnable() {
            public void run() {
                mBluetoothMonitor.initDetectBluetoothDevice();
...
        }).start();
</code>
          
<code java>
//frameworks/base/services/java/com/android/server/SystemServer.java
 private void startOtherServices() {
 ...
   Slog.i(TAG, "Bluetooth Manager Service");
   bluetooth = new BluetoothManagerService(context);
   ServiceManager.addService(BluetoothAdapter.BLUETOOTH_MANAGER_SERVICE, bluetooth);
 ...
 }
</code>





