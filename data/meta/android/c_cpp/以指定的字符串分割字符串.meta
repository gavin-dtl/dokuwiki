a:2:{s:7:"current";a:8:{s:4:"date";a:2:{s:7:"created";i:1473836028;s:8:"modified";i:1473836028;}s:7:"creator";s:9:"邓庭亮";s:4:"user";s:5:"gavin";s:11:"last_change";a:8:{s:4:"date";i:1473836028;s:2:"ip";s:12:"192.168.3.42";s:4:"type";s:1:"C";s:2:"id";s:50:"android:c_cpp:以指定的字符串分割字符串";s:4:"user";s:5:"gavin";s:3:"sum";s:6:"创建";s:5:"extra";s:0:"";s:10:"sizechange";i:4765;}s:5:"title";s:36:"以指定的字符串分割字符串";s:11:"description";a:2:{s:15:"tableofcontents";a:1:{i:0;a:4:{s:3:"hid";s:36:"以指定的字符串分割字符串";s:5:"title";s:36:"以指定的字符串分割字符串";s:4:"type";s:2:"ul";s:5:"level";i:2;}}s:8:"abstract";s:833:"以指定的字符串分割字符串

	*  函数StringSplit(分割字符串到一个字符串数组中，其中该数组第0位为分割后字符串的个数) 
	*  函数StringSplit_Struct(以定义一个新结构的方式来实现该函数)


#include <stdio.h>

/*实现方案1*/
/*分割字符串到一个字符串数组中，其中该数组第一位为分割后的个数*/
char** StringSplit(const char* string,const char* split)
{
     char** result;
     /*首先分配一个char*的内存，然后再动态分配剩下的内存*/
     result = (char * * )malloc(sizeof(char *)*1);
     memset(result,0,sizeof(char *)*1);
     /*定义一个遍历用的指针和一个寻找位置用的指针*/
     char* p = string;
     char* pos = string;
     /*无论是否存在该分割串，绝对都会分割到一个字符串*/
  …";}s:8:"internal";a:2:{s:5:"cache";b:1;s:3:"toc";b:1;}s:8:"relation";a:1:{s:10:"firstimage";s:0:"";}}s:10:"persistent";a:4:{s:4:"date";a:1:{s:7:"created";i:1473836028;}s:7:"creator";s:9:"邓庭亮";s:4:"user";s:5:"gavin";s:11:"last_change";a:8:{s:4:"date";i:1473836028;s:2:"ip";s:12:"192.168.3.42";s:4:"type";s:1:"C";s:2:"id";s:50:"android:c_cpp:以指定的字符串分割字符串";s:4:"user";s:5:"gavin";s:3:"sum";s:6:"创建";s:5:"extra";s:0:"";s:10:"sizechange";i:4765;}}}