a:2:{s:7:"current";a:8:{s:4:"date";a:2:{s:7:"created";i:1473767935;s:8:"modified";i:1473767935;}s:7:"creator";s:9:"邓庭亮";s:4:"user";s:5:"gavin";s:11:"last_change";a:8:{s:4:"date";i:1473767935;s:2:"ip";s:12:"192.168.3.42";s:4:"type";s:1:"C";s:2:"id";s:32:"android:c_cpp:递归链表逆序";s:4:"user";s:5:"gavin";s:3:"sum";s:6:"创建";s:5:"extra";s:0:"";s:10:"sizechange";i:384;}s:5:"title";s:18:"递归链表逆序";s:11:"description";a:2:{s:15:"tableofcontents";a:1:{i:0;a:4:{s:3:"hid";s:18:"递归链表逆序";s:5:"title";s:18:"递归链表逆序";s:4:"type";s:2:"ul";s:5:"level";i:2;}}s:8:"abstract";s:356:"递归链表逆序


ListNode* reverse_list( ListNode* head) //逆序  
{  
    ListNode* new_head=head;  
    
    if(head==NULL || head->next==NULL)  
        return head;  
    
    new_head = reverse_list(head->next);  
    head->next->next=head;  
    head->next=NULL;//防止链表成为一个环，这是最关键的。
    
    return new_head;  
}";}s:8:"internal";a:2:{s:5:"cache";b:1;s:3:"toc";b:1;}s:8:"relation";a:1:{s:10:"firstimage";s:0:"";}}s:10:"persistent";a:4:{s:4:"date";a:1:{s:7:"created";i:1473767935;}s:7:"creator";s:9:"邓庭亮";s:4:"user";s:5:"gavin";s:11:"last_change";a:8:{s:4:"date";i:1473767935;s:2:"ip";s:12:"192.168.3.42";s:4:"type";s:1:"C";s:2:"id";s:32:"android:c_cpp:递归链表逆序";s:4:"user";s:5:"gavin";s:3:"sum";s:6:"创建";s:5:"extra";s:0:"";s:10:"sizechange";i:384;}}}