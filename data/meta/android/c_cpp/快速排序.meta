a:2:{s:7:"current";a:8:{s:4:"date";a:2:{s:7:"created";i:1473768539;s:8:"modified";i:1473768539;}s:7:"creator";s:9:"邓庭亮";s:4:"user";s:5:"gavin";s:11:"last_change";a:8:{s:4:"date";i:1473768539;s:2:"ip";s:12:"192.168.3.42";s:4:"type";s:1:"C";s:2:"id";s:26:"android:c_cpp:快速排序";s:4:"user";s:5:"gavin";s:3:"sum";s:6:"创建";s:5:"extra";s:0:"";s:10:"sizechange";i:1098;}s:5:"title";s:12:"快速排序";s:11:"description";a:2:{s:15:"tableofcontents";a:1:{i:0;a:4:{s:3:"hid";s:12:"快速排序";s:5:"title";s:12:"快速排序";s:4:"type";s:2:"ul";s:5:"level";i:2;}}s:8:"abstract";s:613:"快速排序


void quicksort(int k[], int start_num,int end_num)
{                            /*快速排序*/
     int i,j;
     if(start_num < end_num){//划分结束条件
          i = start_num;
          j = end_num+1;
          while(1){
               do{
                    i++;
               }while( !(k[start_num]<=k[i] || i==end_num) );//从第一个开始求出第一个大于基准值的元素位置i
           
               do{
                    j--;
               }while(!(k[start_num]>=k[j] || j==start_num)); //从最后开始求出第一个小于基准值的元素位置j
          …";}s:8:"internal";a:2:{s:5:"cache";b:1;s:3:"toc";b:1;}s:8:"relation";a:1:{s:10:"firstimage";s:0:"";}}s:10:"persistent";a:4:{s:4:"date";a:1:{s:7:"created";i:1473768539;}s:7:"creator";s:9:"邓庭亮";s:4:"user";s:5:"gavin";s:11:"last_change";a:8:{s:4:"date";i:1473768539;s:2:"ip";s:12:"192.168.3.42";s:4:"type";s:1:"C";s:2:"id";s:26:"android:c_cpp:快速排序";s:4:"user";s:5:"gavin";s:3:"sum";s:6:"创建";s:5:"extra";s:0:"";s:10:"sizechange";i:1098;}}}