a:2:{s:7:"current";a:8:{s:4:"date";a:2:{s:7:"created";i:1473768677;s:8:"modified";i:1473768677;}s:7:"creator";s:9:"邓庭亮";s:4:"user";s:5:"gavin";s:11:"last_change";a:8:{s:4:"date";i:1473768677;s:2:"ip";s:12:"192.168.3.42";s:4:"type";s:1:"C";s:2:"id";s:35:"android:c_cpp:多叉树转二叉树";s:4:"user";s:5:"gavin";s:3:"sum";s:6:"创建";s:5:"extra";s:0:"";s:10:"sizechange";i:2022;}s:5:"title";s:21:"多叉树转二叉树";s:11:"description";a:2:{s:15:"tableofcontents";a:1:{i:0;a:4:{s:3:"hid";s:21:"多叉树转二叉树";s:5:"title";s:21:"多叉树转二叉树";s:4:"type";s:2:"ul";s:5:"level";i:2;}}s:8:"abstract";s:517:"多叉树转二叉树


#include <stdio.h>
#include <stdlib.h>

typedef struct TreeNode
{
     int child_count;
     int data;
     struct TreeNode *child[3];
}TreeNode_t;
typedef struct BinaryTreeNode
{
     int data;
     struct BinaryTreeNode *leftchild;
     struct BinaryTreeNode *rightchild;
}BinaryTreeNode_t;

BinaryTreeNode_t *toBinaryTree(TreeNode_t *root);
void InOrderTraverse(BinaryTreeNode_t *T,int level);
int main(int argc,char *argv[])
{
     int i = 0, level = 0;
     TreeNode_t *root=NULL;
    …";}s:8:"internal";a:2:{s:5:"cache";b:1;s:3:"toc";b:1;}s:8:"relation";a:1:{s:10:"firstimage";s:0:"";}}s:10:"persistent";a:4:{s:4:"date";a:1:{s:7:"created";i:1473768677;}s:7:"creator";s:9:"邓庭亮";s:4:"user";s:5:"gavin";s:11:"last_change";a:8:{s:4:"date";i:1473768677;s:2:"ip";s:12:"192.168.3.42";s:4:"type";s:1:"C";s:2:"id";s:35:"android:c_cpp:多叉树转二叉树";s:4:"user";s:5:"gavin";s:3:"sum";s:6:"创建";s:5:"extra";s:0:"";s:10:"sizechange";i:2022;}}}