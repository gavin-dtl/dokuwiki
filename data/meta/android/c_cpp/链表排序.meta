a:2:{s:7:"current";a:8:{s:4:"date";a:2:{s:7:"created";i:1473768017;s:8:"modified";i:1473768017;}s:7:"creator";s:9:"邓庭亮";s:4:"user";s:5:"gavin";s:11:"last_change";a:8:{s:4:"date";i:1473768017;s:2:"ip";s:12:"192.168.3.42";s:4:"type";s:1:"C";s:2:"id";s:26:"android:c_cpp:链表排序";s:4:"user";s:5:"gavin";s:3:"sum";s:6:"创建";s:5:"extra";s:0:"";s:10:"sizechange";i:1113;}s:5:"title";s:12:"链表排序";s:11:"description";a:2:{s:15:"tableofcontents";a:1:{i:0;a:4:{s:3:"hid";s:12:"链表排序";s:5:"title";s:12:"链表排序";s:4:"type";s:2:"ul";s:5:"level";i:2;}}s:8:"abstract";s:619:"链表排序


LNODE *link_sequence(LNODE *head)
{
     LNODE *pb=NULL, *p_datam=NULL;//p_datam每轮最大或最小的基准值
     if(head == NULL)
          return head;//判断链表是否为空
     p_datam = head;
    
     while(p_datam->next != NULL)
     {
          pb = p_datam->next;//每一轮开始都让pb指向p_datam的下一个节点
          while(pb != NULL)
          {
               if(p_datam->data < pb->data)//从大到小排序
               {
                    LNODE p_temp;//定义一个交换所需要的中间变量
                    p_temp = *p_datam;
                    *p_da…";}s:8:"internal";a:2:{s:5:"cache";b:1;s:3:"toc";b:1;}s:8:"relation";a:1:{s:10:"firstimage";s:0:"";}}s:10:"persistent";a:4:{s:4:"date";a:1:{s:7:"created";i:1473768017;}s:7:"creator";s:9:"邓庭亮";s:4:"user";s:5:"gavin";s:11:"last_change";a:8:{s:4:"date";i:1473768017;s:2:"ip";s:12:"192.168.3.42";s:4:"type";s:1:"C";s:2:"id";s:26:"android:c_cpp:链表排序";s:4:"user";s:5:"gavin";s:3:"sum";s:6:"创建";s:5:"extra";s:0:"";s:10:"sizechange";i:1113;}}}