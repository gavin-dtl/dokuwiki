a:2:{s:7:"current";a:8:{s:4:"date";a:2:{s:7:"created";i:1473767657;s:8:"modified";i:1473767657;}s:7:"creator";s:9:"邓庭亮";s:4:"user";s:5:"gavin";s:11:"last_change";a:8:{s:4:"date";i:1473767657;s:2:"ip";s:12:"192.168.3.42";s:4:"type";s:1:"C";s:2:"id";s:21:"android:c_c:二叉树";s:4:"user";s:5:"gavin";s:3:"sum";s:6:"创建";s:5:"extra";s:0:"";s:10:"sizechange";i:3236;}s:5:"title";s:9:"二叉树";s:11:"description";a:2:{s:15:"tableofcontents";a:1:{i:0;a:4:{s:3:"hid";s:9:"二叉树";s:5:"title";s:9:"二叉树";s:4:"type";s:2:"ul";s:5:"level";i:2;}}s:8:"abstract";s:609:"二叉树


#include "stdio.h"

//二叉树的练习


typedef struct BiTNode
{
    char data;   /*结点的数据域*/
    struct BiTNode *lchild , *rchild;  /*指向左孩子和右孩子*/
} BiTNode , *BiTree;

/*创建一棵二叉树*/
CreatBiTree(BiTree *T)
{
    char c;

     c = getch();
     printf("get = %c\n",c);
    if(c == ' ')
          *T = NULL;
    else
     {
       *T = (BiTNode * )malloc(sizeof(BiTNode));  /*创建根结点*/
       (*T)->data = c;                        /*向根结点中输入数据*/
       CreatBiTree(&((*T)->lchild));       /*递归地创建左子树*/
       C…";}s:8:"internal";a:2:{s:5:"cache";b:1;s:3:"toc";b:1;}s:8:"relation";a:1:{s:10:"firstimage";s:0:"";}}s:10:"persistent";a:4:{s:4:"date";a:1:{s:7:"created";i:1473767657;}s:7:"creator";s:9:"邓庭亮";s:4:"user";s:5:"gavin";s:11:"last_change";a:8:{s:4:"date";i:1473767657;s:2:"ip";s:12:"192.168.3.42";s:4:"type";s:1:"C";s:2:"id";s:21:"android:c_c:二叉树";s:4:"user";s:5:"gavin";s:3:"sum";s:6:"创建";s:5:"extra";s:0:"";s:10:"sizechange";i:3236;}}}