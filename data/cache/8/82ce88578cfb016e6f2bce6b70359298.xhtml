
<h3 class="sectionedit1" id="linux_驱动demo">linux 驱动demo</h3>
<div class="level3">
<pre class="code cpp"><span class="coMULTI">/**
 * @file stm8mcu_i2c.c
 * @author gavin, gavin_dtl@163.com
 * @version 1.0
 * @date 2016-06-12
 * @Modified date 2016-06-12
 * @brief 
 */</span>
&nbsp;
&nbsp;
<span class="co2">#include &lt;linux/kernel.h&gt;  </span>
<span class="co2">#include &lt;linux/fs.h&gt;  </span>
<span class="co2">#include &lt;linux/init.h&gt;  </span>
<span class="co2">#include &lt;linux/delay.h&gt;  </span>
<span class="co2">#include &lt;asm/uaccess.h&gt;  </span>
<span class="co2">#include &lt;asm/irq.h&gt;  </span>
<span class="co2">#include &lt;asm/io.h&gt;  </span>
<span class="co2">#include &lt;linux/module.h&gt;  </span>
<span class="co2">#include &lt;linux/device.h&gt;     //class_create  </span>
&nbsp;
<span class="co1">//static char device_name = &quot;stm8mcu_i2c&quot;;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">struct</span> <span class="kw2">class</span> <span class="sy2">*</span>firstdrv_class<span class="sy4">;</span>  
<span class="kw4">static</span> <span class="kw4">struct</span> device <span class="sy2">*</span>firstdrv_device<span class="sy4">;</span>  
&nbsp;
<span class="kw4">int</span> major<span class="sy4">;</span>  
<span class="kw4">static</span> <span class="kw4">int</span> stm8_open<span class="br0">&#40;</span><span class="kw4">struct</span> inode <span class="sy2">*</span> inode, <span class="kw4">struct</span> file <span class="sy2">*</span> filp<span class="br0">&#41;</span>  
<span class="br0">&#123;</span>  
    printk<span class="br0">&#40;</span><span class="st0">&quot;stm8_open<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy4">;</span>  
    <span class="kw1">return</span> <span class="nu0">0</span><span class="sy4">;</span>  
<span class="br0">&#125;</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">int</span> stm8_release<span class="br0">&#40;</span><span class="kw4">struct</span> inode <span class="sy2">*</span> inode, <span class="kw4">struct</span> file <span class="sy2">*</span> filp<span class="br0">&#41;</span>  
<span class="br0">&#123;</span>  
    printk<span class="br0">&#40;</span><span class="st0">&quot;stm8_release<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy4">;</span>  
    <span class="kw1">return</span> <span class="nu0">0</span><span class="sy4">;</span>  
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">int</span> stm8_write<span class="br0">&#40;</span><span class="kw4">struct</span> file <span class="sy2">*</span> file, <span class="kw4">const</span> <span class="kw4">char</span> __user <span class="sy2">*</span> buffer, <span class="kw4">size_t</span> count, loff_t <span class="sy2">*</span> ppos<span class="br0">&#41;</span>  
<span class="br0">&#123;</span>  
    <span class="kw4">int</span> ret <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span>
    printk<span class="br0">&#40;</span><span class="st0">&quot;stm8_write<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy4">;</span>  
    <span class="kw1">return</span> ret<span class="sy4">;</span>  
<span class="br0">&#125;</span>  
<span class="kw4">static</span> <span class="kw4">int</span> stm8_read<span class="br0">&#40;</span><span class="kw4">struct</span> file <span class="sy2">*</span>filp, <span class="kw4">char</span> __user <span class="sy2">*</span>buffer, <span class="kw4">size_t</span> count, loff_t <span class="sy2">*</span>ppos<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    <span class="kw4">int</span>  ret <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span>
    printk<span class="br0">&#40;</span><span class="st0">&quot;stm8_read<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy4">;</span>  
    <span class="kw1">return</span> ret<span class="sy4">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/* File operations struct for character device */</span>  
<span class="kw4">static</span> <span class="kw4">const</span> <span class="kw4">struct</span> file_operations first_drv_fops <span class="sy1">=</span> <span class="br0">&#123;</span>  
    .<span class="me1">owner</span>        <span class="sy1">=</span> THIS_MODULE,  
    .<span class="me1">open</span>       <span class="sy1">=</span> stm8_open,
    .<span class="me1">release</span>    <span class="sy1">=</span> stm8_release,
    .<span class="me1">write</span>      <span class="sy1">=</span> stm8_write,      
    .<span class="me1">read</span>       <span class="sy1">=</span> stm8_read,
<span class="br0">&#125;</span><span class="sy4">;</span>  
&nbsp;
<span class="coMULTI">/* 驱动入口函数 */</span>  
<span class="kw4">static</span> <span class="kw4">int</span> first_drv_init<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>  
<span class="br0">&#123;</span>  
    <span class="coMULTI">/* 主设备号设置为0表示由系统自动分配主设备号 */</span>  
    major <span class="sy1">=</span> register_chrdev<span class="br0">&#40;</span><span class="nu0">0</span>, <span class="st0">&quot;stm8mcu_i2c&quot;</span>, <span class="sy3">&amp;</span>first_drv_fops<span class="br0">&#41;</span><span class="sy4">;</span>  
&nbsp;
    <span class="coMULTI">/* 创建firstdrv类 */</span>  
    firstdrv_class <span class="sy1">=</span> class_create<span class="br0">&#40;</span>THIS_MODULE, <span class="st0">&quot;stm8mcu_i2c&quot;</span><span class="br0">&#41;</span><span class="sy4">;</span>  
&nbsp;
    <span class="coMULTI">/* 在firstdrv类下创建xxx设备，供应用程序打开设备*/</span>  
    firstdrv_device <span class="sy1">=</span> device_create<span class="br0">&#40;</span>firstdrv_class, <span class="kw2">NULL</span>, MKDEV<span class="br0">&#40;</span>major, <span class="nu0">0</span><span class="br0">&#41;</span>, <span class="kw2">NULL</span>, <span class="st0">&quot;stm8mcu_i2c&quot;</span><span class="br0">&#41;</span><span class="sy4">;</span>  
    <span class="kw1">return</span> <span class="nu0">0</span><span class="sy4">;</span>  
<span class="br0">&#125;</span>  
&nbsp;
<span class="coMULTI">/* 驱动出口函数 */</span>  
<span class="kw4">static</span> <span class="kw4">void</span> first_drv_exit<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>  
<span class="br0">&#123;</span>  
    unregister_chrdev<span class="br0">&#40;</span>major, <span class="st0">&quot;stm8mcu_i2c&quot;</span><span class="br0">&#41;</span><span class="sy4">;</span>  
    device_unregister<span class="br0">&#40;</span>firstdrv_device<span class="br0">&#41;</span><span class="sy4">;</span>  <span class="co1">//卸载类下的设备  </span>
    class_destroy<span class="br0">&#40;</span>firstdrv_class<span class="br0">&#41;</span><span class="sy4">;</span>      <span class="co1">//卸载类  </span>
<span class="br0">&#125;</span>  
&nbsp;
module_init<span class="br0">&#40;</span>first_drv_init<span class="br0">&#41;</span><span class="sy4">;</span>  <span class="co1">//用于修饰入口函数  </span>
module_exit<span class="br0">&#40;</span>first_drv_exit<span class="br0">&#41;</span><span class="sy4">;</span>  <span class="co1">//用于修饰出口函数      </span>
&nbsp;
MODULE_AUTHOR<span class="br0">&#40;</span><span class="st0">&quot;LWJ&quot;</span><span class="br0">&#41;</span><span class="sy4">;</span>  
MODULE_DESCRIPTION<span class="br0">&#40;</span><span class="st0">&quot;Just for Demon&quot;</span><span class="br0">&#41;</span><span class="sy4">;</span>  
MODULE_LICENSE<span class="br0">&#40;</span><span class="st0">&quot;GPL&quot;</span><span class="br0">&#41;</span><span class="sy4">;</span>  <span class="co1">//遵循GPL协议</span></pre>

</div>
