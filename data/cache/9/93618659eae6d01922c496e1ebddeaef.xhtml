
<h2 class="sectionedit1" id="git工程管理">git工程管理</h2>
<div class="level2">
<hr />

</div>
<!-- EDIT1 SECTION "git工程管理" [1-34] -->
<h3 class="sectionedit2" id="git_基础">git 基础</h3>
<div class="level3">
<pre class="code bash">  <span class="kw2">git config</span> <span class="re5">--global</span> user.name <span class="st0">&quot;gavin&quot;</span>
  <span class="kw2">git config</span> <span class="re5">--global</span> user.email <span class="st0">&quot;gavin.deng@eyeseeuhd.com&quot;</span>
  <span class="kw2">git init</span>
  <span class="kw2">git add</span> .
  <span class="kw2">git commit</span>
  <span class="kw2">git diff</span>  <span class="re5">--cached</span>   <span class="co0">#查看index file和仓库之间代码的区别</span>
  <span class="kw2">git status</span>   <span class="co0">#命令来获取整体改动的信息</span>
  <span class="kw2">git log</span>   <span class="co0">#或 -p</span>
  <span class="kw2">git commit</span> <span class="re5">-a</span>  <span class="co0">#但不能新增文件</span>
&nbsp;
&nbsp;
  <span class="kw2">git reset</span> <span class="re5">--hard</span>
  <span class="kw2">git show</span> master  <span class="co0">#master分支名</span></pre>

</div>
<!-- EDIT2 SECTION "git 基础" [35-453] -->
<h3 class="sectionedit3" id="git_分支">git 分支</h3>
<div class="level3">
<pre class="code bash">  <span class="kw2">git branch</span> experimental  <span class="co0">#新建分支</span>
  <span class="kw2">git branch</span>          <span class="co0">#列出分支</span>
  <span class="kw2">git checkout</span> experimental <span class="co0">#切换分支</span>
  <span class="kw2">git commit</span> <span class="re5">-a</span>   <span class="co0">#在分支体提交工作</span>
&nbsp;
  <span class="kw2">git checkout</span> master   <span class="co0">#切换到主分支</span>
&nbsp;
  <span class="kw2">git merge</span> experimental  <span class="co0">#合并分支</span>
&nbsp;
  <span class="kw2">git branch</span> <span class="re5">-d</span> experimental   <span class="co0">#在分支已经合并到主干后删除分支</span>
&nbsp;
   <span class="co0">#注：本地切换分支，会把代码修改为对应分支的代码</span></pre>

</div>
<!-- EDIT3 SECTION "git 分支" [454-898] -->
<h3 class="sectionedit4" id="git远程分支">git远程分支</h3>
<div class="level3">
<pre class="code bash">  <span class="kw2">git init</span> <span class="re5">--bare</span> <span class="sy0">/</span>home<span class="sy0">/</span>allen<span class="sy0">/</span>A20_sdk<span class="sy0">/</span>lichee<span class="sy0">/</span>linux-<span class="nu0">3.4</span><span class="sy0">/</span>linux-<span class="nu0">3.4</span>.git
  <span class="kw2">git init</span> <span class="re5">--bare</span> .<span class="sy0">/</span>share.git
&nbsp;
  <span class="kw2">git remote</span> 查看远程分支
  <span class="kw2">git remote</span> add oringe ssh:..............<span class="sy0">/</span>share.git
  <span class="kw2">git clone</span> <span class="sy0">/</span>home<span class="sy0">/</span>rocrocket<span class="sy0">/</span>git-study<span class="sy0">/</span>rocrocket myrepo
&nbsp;
  <span class="kw2">git clone</span> ssh:<span class="sy0">//</span>gavin<span class="sy0">@</span>192.168.0.99<span class="sy0">//</span>home<span class="sy0">/</span>gavin<span class="sy0">/</span>share.git text
&nbsp;
  <span class="kw2">git clone</span> ~<span class="sy0">/</span>project<span class="sy0">/</span>apps<span class="sy0">/</span>base_dir.git text
&nbsp;
  <span class="kw2">git</span> push--all origin</pre>

</div>
<!-- EDIT4 SECTION "git远程分支" [899-1320] -->
<h3 class="sectionedit5" id="git_个性配置">git 个性配置</h3>
<div class="level3">

<p>
 - 针对开发日志，要说一句：切记写开发日志的时候，第一行一定要是少于50字的开发概括信息，而且第二行务必是空行，第三行开we始才可以开始细致描述开发信息。这是因为很多版本服务系统中的email机制都会选取log中的第一行
 - 默认编辑器改为vim。打开.git/config文件，在core中添加 editor=vim即可。
</p>

</div>
<!-- EDIT5 SECTION "git 个性配置" [1321-1748] -->
<h3 class="sectionedit6" id="git_工程管理">git 工程管理</h3>
<div class="level3">
<ol>
<li class="level1"><div class="li"> 运行get_git.sh，克隆远程代码</div>
</li>
<li class="level1"><div class="li"> 新建分支：git checkout -b newbranch_name</div>
</li>
<li class="level1"><div class="li"> git status      (查看修改过的文件)</div>
</li>
<li class="level1"><div class="li"> git add check_filename  (把修改过的文件添加到头同步的暂存库中，不能用git add .)</div>
</li>
<li class="level1"><div class="li"> git add -u，会将本地有改动（包括删除和修改）的已经追踪的文件标记到暂存区中。</div>
</li>
<li class="level1"><div class="li"> git commit -m “msg”     or  git commit</div>
</li>
<li class="level1"><div class="li"> git push &lt;remote&gt; &lt;newbranch_name&gt;  eg:git push origin newbranch_name #上传到指定远程库分支</div>
</li>
<li class="level1"><div class="li"> git pull &lt;remote&gt; &lt;newbranch_name&gt;  #下拉远程库代码，慎用,会修改本地代码</div>
</li>
<li class="level1 node"><div class="li"> git push 不成功，有冲突</div>
<ul>
<li class="level2 node"><div class="li"> 修改不同文件：         </div>
<ol>
<li class="level4"><div class="li"> git fetch</div>
</li>
<li class="level4"><div class="li"> git merge &lt;remote&gt;/&lt;newbranch_name&gt;  eg:git merge origin/master                       </div>
</li>
<li class="level4"><div class="li"> git push</div>
</li>
</ol>
</li>
<li class="level2 node"><div class="li"> 修改相同文件不同区域：</div>
<ol>
<li class="level4"><div class="li"> git fetch</div>
</li>
<li class="level4"><div class="li"> git merge &lt;remote&gt;/&lt;newbranch_name&gt;   eg:git merge origin/master                    </div>
</li>
<li class="level4"><div class="li"> git push</div>
</li>
</ol>
</li>
<li class="level2 node"><div class="li"> git merge 不能解决的冲突：</div>
<ol>
<li class="level4"><div class="li"> git mergetool 手动解决</div>
</li>
<li class="level4"><div class="li"> git push</div>
</li>
</ol>
</li>
</ul>
</li>
<li class="level1 node"><div class="li"> 确保版本库一样</div>
<ol>
<li class="level2"><div class="li"> git fetch</div>
</li>
<li class="level2"><div class="li"> git reset –hard origin/master  #会修改本地代码</div>
</li>
</ol>
</li>
<li class="level1"><div class="li"> git diff，显示工作区和暂存区的差异</div>
</li>
<li class="level1"><div class="li"> 将默认编辑器改为vim。打开.git/config文件，在core中添加 editor=vim即可</div>
</li>
</ol>

</div>
<!-- EDIT6 SECTION "git 工程管理" [1749-] -->