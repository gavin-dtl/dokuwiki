<span class="co2">#include &lt;stdio.h&gt;</span>
<span class="co2">#include &lt;stdlib.h&gt;</span>
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">struct</span> TreeNode
<span class="br0">&#123;</span>
     <span class="kw4">int</span> child_count<span class="sy0">;</span>
     <span class="kw4">int</span> data<span class="sy0">;</span>
     <span class="kw4">struct</span> TreeNode <span class="sy0">*</span>child<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>TreeNode_t<span class="sy0">;</span>
<span class="kw4">typedef</span> <span class="kw4">struct</span> BinaryTreeNode
<span class="br0">&#123;</span>
     <span class="kw4">int</span> data<span class="sy0">;</span>
     <span class="kw4">struct</span> BinaryTreeNode <span class="sy0">*</span>leftchild<span class="sy0">;</span>
     <span class="kw4">struct</span> BinaryTreeNode <span class="sy0">*</span>rightchild<span class="sy0">;</span>
<span class="br0">&#125;</span>BinaryTreeNode_t<span class="sy0">;</span>
&nbsp;
BinaryTreeNode_t <span class="sy0">*</span>toBinaryTree<span class="br0">&#40;</span>TreeNode_t <span class="sy0">*</span>root<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw4">void</span> InOrderTraverse<span class="br0">&#40;</span>BinaryTreeNode_t <span class="sy0">*</span>T<span class="sy0">,</span><span class="kw4">int</span> level<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw4">int</span> main<span class="br0">&#40;</span><span class="kw4">int</span> argc<span class="sy0">,</span><span class="kw4">char</span> <span class="sy0">*</span>argv<span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
     <span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">,</span> level <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
     TreeNode_t <span class="sy0">*</span>root<span class="sy0">=</span>NULL<span class="sy0">;</span>
     BinaryTreeNode_t <span class="sy0">*</span>p<span class="sy0">=</span>NULL<span class="sy0">;</span>
     root <span class="sy0">=</span> <span class="br0">&#40;</span>TreeNode_t <span class="sy0">*</span><span class="br0">&#41;</span><a href="http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html"><span class="kw3">malloc</span></a><span class="br0">&#40;</span><span class="kw4">sizeof</span><span class="br0">&#40;</span>TreeNode_t<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
     root<span class="sy0">-&gt;</span>data <span class="sy0">=</span> <span class="nu0">3</span><span class="sy0">;</span>
     root<span class="sy0">-&gt;</span>child_count <span class="sy0">=</span> <span class="nu0">3</span><span class="sy0">;</span>
&nbsp;
     <span class="kw1">for</span><span class="br0">&#40;</span>i<span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span>i<span class="sy0">&lt;</span>root<span class="sy0">-&gt;</span>child_count<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span>
     <span class="br0">&#123;</span>
          root<span class="sy0">-&gt;</span>child<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#40;</span>TreeNode_t <span class="sy0">*</span><span class="br0">&#41;</span><a href="http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html"><span class="kw3">malloc</span></a><span class="br0">&#40;</span><span class="kw4">sizeof</span><span class="br0">&#40;</span>TreeNode_t<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
          root<span class="sy0">-&gt;</span>child<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy0">-&gt;</span>child_count <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
          root<span class="sy0">-&gt;</span>child<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy0">-&gt;</span>data <span class="sy0">=</span> i<span class="sy0">;</span>
     <span class="br0">&#125;</span>
&nbsp;
     p <span class="sy0">=</span> toBinaryTree<span class="br0">&#40;</span>root<span class="br0">&#41;</span><span class="sy0">;</span>
     InOrderTraverse<span class="br0">&#40;</span>p<span class="sy0">,</span>level<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
     <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
BinaryTreeNode_t <span class="sy0">*</span>toBinaryTree<span class="br0">&#40;</span>TreeNode_t <span class="sy0">*</span>root<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
     <span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
     <span class="kw1">if</span><span class="br0">&#40;</span>root <span class="sy0">==</span> NULL<span class="br0">&#41;</span>
     <span class="br0">&#123;</span>
          <span class="kw1">return</span> NULL<span class="sy0">;</span>
     <span class="br0">&#125;</span>
&nbsp;
     BinaryTreeNode_t <span class="sy0">*</span>binaryRoot <span class="sy0">=</span> <span class="br0">&#40;</span>BinaryTreeNode_t <span class="sy0">*</span><span class="br0">&#41;</span><a href="http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html"><span class="kw3">malloc</span></a><span class="br0">&#40;</span><span class="kw4">sizeof</span><span class="br0">&#40;</span>BinaryTreeNode_t<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
     binaryRoot<span class="sy0">-&gt;</span>leftchild <span class="sy0">=</span> binaryRoot<span class="sy0">-&gt;</span>rightchild<span class="sy0">=</span>NULL<span class="sy0">;</span>
&nbsp;
     binaryRoot<span class="sy0">-&gt;</span>data <span class="sy0">=</span> root<span class="sy0">-&gt;</span>data<span class="sy0">;</span>
     <span class="co1">//将多叉树的第一个孩子变为二叉树的左孩子（递归）</span>
     binaryRoot<span class="sy0">-&gt;</span>leftchild <span class="sy0">=</span> toBinaryTree<span class="br0">&#40;</span>root<span class="sy0">-&gt;</span>child<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
     BinaryTreeNode_t<span class="sy0">*</span> brother <span class="sy0">=</span> binaryRoot<span class="sy0">-&gt;</span>leftchild<span class="sy0">;</span>
&nbsp;
     <span class="kw1">for</span><span class="br0">&#40;</span>i <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> root<span class="sy0">-&gt;</span>child_count<span class="sy0">;</span>i<span class="sy0">++</span><span class="br0">&#41;</span>
     <span class="br0">&#123;</span>  
          brother<span class="sy0">-&gt;</span>rightchild <span class="sy0">=</span> toBinaryTree<span class="br0">&#40;</span>root<span class="sy0">-&gt;</span>child<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
          brother <span class="sy0">=</span> brother<span class="sy0">-&gt;</span>rightchild<span class="sy0">;</span>  
     <span class="br0">&#125;</span>  
&nbsp;
     <span class="kw1">return</span> binaryRoot<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> InOrderTraverse<span class="br0">&#40;</span>BinaryTreeNode_t <span class="sy0">*</span>T<span class="sy0">,</span><span class="kw4">int</span> level<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    <span class="kw1">if</span><span class="br0">&#40;</span>T<span class="br0">&#41;</span>
     <span class="br0">&#123;</span>   <span class="coMULTI">/*递归结束条件，T为空*/</span>
        InOrderTraverse<span class="br0">&#40;</span>T<span class="sy0">-&gt;</span>leftchild<span class="sy0">,</span>level<span class="sy0">+</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/*先序遍历T的左子树*/</span>
          <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span><span class="st0">&quot;node: %d, level: %d<span class="es1">\n</span>&quot;</span><span class="sy0">,</span>T<span class="sy0">-&gt;</span>data<span class="sy0">,</span>level<span class="br0">&#41;</span><span class="sy0">;</span>
        InOrderTraverse<span class="br0">&#40;</span>T<span class="sy0">-&gt;</span>rightchild<span class="sy0">,</span>level<span class="sy0">+</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/*先序遍历T的右子数*/</span>
    <span class="br0">&#125;</span>
     <span class="kw1">return</span><span class="sy0">;</span>
<span class="br0">&#125;</span>